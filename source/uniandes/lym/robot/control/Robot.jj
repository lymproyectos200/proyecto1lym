/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

			
		| 	<RIGHT: "RIGHT">
		| 	<PUT: "Put">
		| 	<PICK: "Pick">
		|   < POP: "Pop" >
		|   <JUMPTO: "JumpTo" >
        |   < DROP: "Drop" >
        |   < GRAB: "Grab" >
        |   < GET: "Get" >
        |   < FREE: "Free" >  
        |   < STEP: "Step" >
        |   < JUMP: "Jump" >			

}

TOKEN:
{
		<BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	

}



TOKEN :
{
		<NUM: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
        
}



	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(
		  (
		   < STEP >  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		|  < JUMP >  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		|  < JUMPTO >  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:JumpTo ";}
		|  < VEER > "(" x= String() ")" {veer( x ); salida = "Comando:  Veer";}
	    |  < LOOK > "(" x= String() ")" {look(x); salida = "Comando:  Look";}    #------------------
	    |  < DROP > "(" x=num() ")" {world.putChips(x); salida = "Comando:  Drop";}
	    |  < GRAB > "(" x=num() ")" {world.pickupBalloon(x); salida = "Comando:  Grab";}
	    |  < GET > "(" x=num() ")" {world.pickupChip(x); salida = "Comando:  Get";}
	    |  < FREE > "(" x=num() ")" {world.putBalloon(x); salida = "Comando:  Free";}
	    |  < POP > "(" x=num() ")" {world.popBalloon(x); salida = "Comando:  Pop";}
	    |  < DMOVE > "(" x=num()"," y=String() ")" {Dmove(x,y); salida = "Comando:  Dmove";}#--------
	    |  < OMOVE > "(" x=num()"," y=String() ")" {Omove(x,y); salida = "Comando:  Omove";}#---------
	    
	    
	       
		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}
	void veer(boolean direc): { int x= 0;}
	{
		<d>
		{
		  String a = token.image;
		  comand.add(a);
		  if (direc)
		  {
		    if (a.equals("right-"))
		    	world.turnRight();
		    	
		    else if (a.equals("left-"))
		    { 
		    	world.turnRight();
		    	world.turnRight();
		    	world.turnRight();
		    }
		    	
		    else if (a.equals("around-"))
			{
				world.turnRight();
				world.turnRight();
			}
			else
			{
			  world.turnRight();
			  world.turnRight();
			  world.turnRight();
			  world.turnRight();
			}
	}

void look(boolean direc): { int x= 0;}
	{
		<d>
		{
		  String a = token.image;
		  comand.add(a);
		  f = world.getFacing()
		  if (direc)
			{
				if (a.equals("south"))
					{
						if (f.equals("NORTH")
						{
							world.turnRight();
							world.turnRight();
						})
						else if (f.equals("WEST")
						{
							world.turnRight();
							world.turnRight();
							world.turnRight();
						})
						else if (f.equals("EAST")
						{
							world.turnRight();
						})
					}
				if (a.equals("west"))
					{
						if (f.equals("NORTH")
						{
							world.turnRight();
							world.turnRight();
							world.turnRight();
						})
						else if (f.equals("SOUTH")
						{
							world.turnRight();
						})
						else if (f.equals("EAST")
						{
							world.turnRight();
							world.turnRight();
						})
					}
				if (a.equals("east"))
					{
						if (f.equals("NORTH")
						{
							world.turnRight();
						})
						else if (f.equals("SOUTH")
						{
							world.turnRight();
							world.turnRight();
							world.turnRight();
						})
						else if (f.equals("WEST")
						{
							world.turnRight();
							world.turnRight();
						})
					}
				if (a.equals("north"))
		    	{
					if (f.equals("EAST")
					{
						world.turnRight();
						world.turnRight();
						world.turnRight();
					})
					else if (f.equals("SOUTH")
					{
						world.turnRight();
						world.turnRight();
					})
					else if (f.equals("WEST")
					{
						world.turnRight();
					})
				}
			}
			
		}
	 }
	
	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	